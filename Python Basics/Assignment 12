1. In what modes should the PdfFileReader() and PdfFileWriter() File objects will be opened?
Answer:
he PdfFileReader() File object should be opened in binary read mode ('rb'), and the PdfFileWriter() File object should be opened in binary write mode ('wb').

2. From a PdfFileReader object, how do you get a Page object for page 5?
Answer:
To get a Page object for page 5 from a PdfFileReader object, you can use the getPage() method and pass the page index (0-based) as an argument, like this: page = pdf_reader.getPage(4).

3. What PdfFileReader variable stores the number of pages in the PDF document?
Answer:
The PdfFileReader variable that stores the number of pages in the PDF document is numPages. You can access it with pdf_reader.numPages.

4. If a PdfFileReader object’s PDF is encrypted with the password swordfish, what must you do before you can obtain Page objects from it?
Answer:
If a PdfFileReader object's PDF is encrypted with the password "swordfish," you must call the decrypt() method on the PdfFileReader object and pass the password as an argument before you can obtain Page objects from it. For example: pdf_reader.decrypt('swordfish').

5. What methods do you use to rotate a page?
Answer:
To rotate a page, you can use the rotateClockwise() or rotateCounterClockwise() methods on the Page object. For example: page.rotateClockwise(90).

6. What is the difference between a Run object and a Paragraph object?
Answer:
A Run object in the python-docx library represents a contiguous run of text in a paragraph with the same style. A Paragraph object represents a single paragraph in the document, which can contain one or more Run objects.

7. How do you obtain a list of Paragraph objects for a Document object that’s stored in a variable named doc?
Answer:
To obtain a list of Paragraph objects for a Document object named doc, you can use the ‘paragraphs’ attribute of the Document object. For example: paragraphs_list = doc.paragraphs.

8. What type of object has bold, underline, italic, strike, and outline variables?
Answer:
The Run object in the python-docx library has bold, underline, italic, strike, and outline variables.

9. What is the difference between False, True, and None for the bold variable?
Answer:
For the bold variable in a Run object:
   True: The text in the Run is bold.
   False: The text in the Run is not bold.
   None: The Run's bold property is inherited from the style of the paragraph it belongs to.

10. How do you create a Document object for a new Word document?
Answer:
To create a Document object for a new Word document, you can use the `Document()` constructor, like this: doc = Document().

11. How do you add a paragraph with the text 'Hello, there!' to a Document object stored in a variable named doc?
Answer:
To add a paragraph with the text 'Hello, there!' to a Document object stored in a variable named doc, you can use the add_paragraph() method, like this: doc.add_paragraph('Hello, there!').

12. What integers represent the levels of headings available in Word documents?
Answer:
The integers 0 to 4 represent the levels of headings available in Word documents. 0 is for the main heading level, 1 is for the first subheading level, and so on up to 4 for the fifth subheading level.
