1. What is the name of the feature responsible for generating Regex objects?
Answer:
The name of the feature responsible for generating Regex objects is the re.compile() function in Python's re module.

2. Why do raw strings often appear in Regex objects?
Answer:
Raw strings (prefixed with r) are often used in Regex objects to avoid the need for excessive escaping of backslashes. Since regular expressions often use backslashes to escape special characters, using raw strings makes the regex patterns more readable and less error-prone.

3. What is the return value of the search() method?
Answer:
The return value of the search() method is a Match object if the pattern is found in the string. If the pattern is not found, it returns None.

4. From a Match item, how do you get the actual strings that match the pattern?
Answer:
To get the actual strings that match the pattern from a Match object, you can use the group() method. Calling group() with no arguments returns the entire matched string. You can also use group(n) to access the text matched by the n-th group in the regex pattern.

5. In the regex which created from the r'(\d\d\d)-(\d\d\d-\d\d\d\d)', what does group zero cover? Group 2? Group 1?
Answer:
In the regex r'(\d\d\d)-(\d\d\d-\d\d\d\d)', group zero (\g<0>) covers the entire matched string. Group 1 (\g<1>) covers the first set of three digits, and Group 2 (\g<2>) covers the second set of three digits separated by a hyphen.

6. In standard expression syntax, parentheses and intervals have distinct meanings. How can you tell a regex that you want it to fit real parentheses and periods?
Answer:
To match real parentheses and periods in a regex, you need to escape them with backslashes (‘\(‘ for ‘(‘ and ‘\.’ for ‘.’).

7. The findall() method returns a string list or a list of string tuples. What causes it to return one of the two options?
Answer:
The findall() method returns a list of all non-overlapping matches in the input string. If the regex pattern contains capturing groups (parentheses), it returns a list of tuples containing the groups for each match.

8. In standard expressions, what does the | character mean?
Answer:
In standard expressions, the ‘|’ character means "OR." It is used to specify alternatives, allowing the regex to match any of the alternatives separated by ‘|’.

9. In regular expressions, what does the character stand for?
Answer:
In regular expressions, the character ‘.’ (dot) matches any character except a newline.

10.In regular expressions, what is the difference between the + and * characters?
Answer:
In regular expressions, the + character means "one or more occurrences," matching one or more instances of the preceding character or group. The * character means "zero or more occurrences," matching zero or more instances of the preceding character or group.

11. What is the difference between {4} and {4,5} in regular expression?
Answer:
{4} in a regular expression means exactly four occurrences of the preceding character or group, while {4,5} means four to five occurrences of the preceding character or group.

12. What do you mean by the \d, \w, and \s shorthand character classes signify in regular expressions?
Answer:
In regular expressions, the shorthand character class \d represents any digit (0-9), \w represents any word character (alphanumeric character or underscore), and \s represents any whitespace character (space, tab, newline, etc.).

13. What do means by \D, \W, and \S shorthand character classes signify in regular expressions?
Answer:
In regular expressions, the shorthand character class \D represents any non-digit character, \W represents any non-word character, and \S represents any non-whitespace character.

14. What is the difference between .*? and .*?
Answer:
The difference between .*? and .* is in their behavior of "greediness." .* is "greedy," trying to match as much as possible, while .*? is "non-greedy," trying to match as little as possible.

15. What is the syntax for matching both numbers and lowercase letters with a character class?
Answer:
The syntax for matching both numbers and lowercase letters with a character class is [0-9a-z] or using the shorthand character class \d[a-z].

16. What is the procedure for making a normal expression in regax case insensitive?
Answer:
To make a normal expression in regex case-insensitive, you can pass the re.IGNORECASE flag (or re.I) as the second argument to re.compile() or any regex function. For example, re.compile(r'pattern', re.IGNORECASE).

17. What does the . character normally match? What does it match if re.DOTALL is passed as 2nd argument in re.compile()?
Answer:
The ‘.’ character in regular expressions normally matches any character except a newline. If re.DOTALL is passed as the second argument to re.compile(), the ‘.’ will also match newline characters.


18. If numReg = re.compile(r'\d+'), what will numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen') return?
Answer:
If numRegex = re.compile(r'\d+'), numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen') will return 'X drummers, X pipers, five rings, X hen'.

19. What does passing re.VERBOSE as the 2nd argument to re.compile() allow to do?
Answer:
Passing re.VERBOSE as the second argument to re.compile() allows you to use whitespace and comments within the regex pattern for better readability. It ignores whitespace and comments in the pattern, making it easier to document and understand complex regex patterns.

20. How would you write a regex that match a number with comma for every three digits? It must match the given following:
'42'
'1,234'
'6,368,745'
but not the following:
'12,34,567' (which has only two digits between the commas)
'1234' (which lacks commas)
Answer:
To match a number with a comma for every three digits, you can use the regex pattern r'^\d{1,3}(,\d{3})*$'.

21. How would you write a regex that matches the full name of someone whose last name is Watanabe? You can assume that the first name that comes before it will always be one word that begins with a capital letter. The regex must match the following:
'Haruto Watanabe'
'Alice Watanabe'
'RoboCop Watanabe'
but not the following:
'haruto Watanabe' (where the first name is not capitalized)
'Mr. Watanabe' (where the preceding word has a nonletter character)
'Watanabe' (which has no first name)
'Haruto watanabe' (where Watanabe is not capitalized)
Answer:
To match the full name of someone whose last name is Watanabe, you can use the regex pattern r'[A-Z][a-zA-Z]*\sWatanabe'.

22. How would you write a regex that matches a sentence where the first word is either Alice, Bob, or Carol; the second word is either eats, pets, or throws; the third word is apples, cats, or baseballs; and the sentence ends with a period? This regex should be case-insensitive. It must match the following:
'Alice eats apples.'
'Bob pets cats.'
'Carol throws baseballs.'
'Alice throws Apples.'
'BOB EATS CATS.'
but not the following:
'RoboCop eats apples.'
'ALICE THROWS FOOTBALLS.'
'Carol eats 7 cats.'
Answer:
To match a sentence with specific words, you can use the regex pattern r'(Alice|Bob|Carol)\s(eats|pets|throws)\s(apples|cats|baseballs)\.', and make it case-insensitive by passing re.IGNORECASE flag as the second argument to re.compile().
