Question 1:
Write a program that calculates and prints the value according to the given formula:
Q = Square root of [(2 * C * D)/H]
Following are the fixed values of C and H:
C is 50. H is 30.
D is the variable whose values should be input to your program in a comma-separated sequence.
Example
Let us assume the following comma separated input sequence is given to the program:
100,150,180
The output of the program should be:
18,22,24

Answer:
import math
C = 50
H = 30
def calculate_value(D):
    Q = math.sqrt((2 * C * D) / H)
    return int(Q)
input_sequence = input("Enter comma-separated values of D: ")
D_values = [int(x) for x in input_sequence.split(',')]
result = [str(calculate_value(D)) for D in D_values]
output = ','.join(result)
print("Output:", output)


Question 2:
Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.
Note: i=0,1.., X-1; j=0,1,¡¬Y-1.
Example
Suppose the following inputs are given to the program:
3,5
Then, the output of the program should be:
[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]]

Answer:
def generate_2d_array(X, Y):
    return [[i * j for j in range(Y)] for i in range(X)]
X = int(input("Enter value of X: "))
Y = int(input("Enter value of Y: "))
result = generate_2d_array(X, Y)
for row in result:
    print(row)

Question 3:
Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.
Suppose the following input is supplied to the program:
without,hello,bag,world
Then, the output should be:
bag,hello,without,world

Answer:
input_words = input("Enter comma-separated words: ")
words_list = input_words.split(',')
sorted_words = sorted(words_list)
output = ','.join(sorted_words)
print("Sorted words:", output)

Question 4:
Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.
Suppose the following input is supplied to the program:
hello world and practice makes perfect and hello world again
Then, the output should be:
again and hello makes perfect practice world

Answer:
input_words = input("Enter whitespace-separated words: ")
words_list = input_words.split()
unique_words = sorted(set(words_list))
output = ' '.join(unique_words)
print("Words after removing duplicates and sorting:", output)

Question 5:
Write a program that accepts a sentence and calculate the number of letters and digits.
Suppose the following input is supplied to the program:
hello world! 123
Then, the output should be:
LETTERS 10
DIGITS 3

Answer:
input_sentence = input("Enter a sentence: ")
letters = sum(1 for char in input_sentence if char.isalpha())
digits = sum(1 for char in input_sentence if char.isdigit())
print("LETTERS", letters)
print("DIGITS", digits)

Question 6:
A website requires the users to input username and password to register. Write a program to check the validity of password input by users.
The following are the criteria for checking the password:
1. At least 1 letter between [a-z]
2. At least 1 number between [0-9]
1. At least 1 letter between [A-Z]
3. At least 1 character from [$#@]
4. Minimum length of transaction password: 6
5. Maximum length of transaction password: 12
Your program should accept a sequence of comma separated passwords and will check them according to the above criteria. Passwords that match the criteria are to be printed, each separated by a comma.
Example
If the following passwords are given as input to the program:
ABd1234@1,a F1#,2w3E*,2We3345
Then, the output of the program should be:
ABd1234@1

Answer:
import re
def is_valid_password(password):
    if len(password) < 6 or len(password) > 12:
        return False
    if not re.search("[a-z]", password):
        return False
    if not re.search("[0-9]", password):
        return False
    if not re.search("[A-Z]", password):
        return False
    if not re.search("[$#@]", password):
        return False
    return True
passwords = input("Enter comma-separated passwords: ").split(',')
valid_passwords = [password for password in passwords if is_valid_password(password)]
output = ','.join(valid_passwords)
print("Valid passwords:", output)
