Question1. Create a function that takes three arguments a, b, c and returns the sum of the numbers that are evenly divided by c from the range a, b inclusive.
Examples
evenly_divisible(1, 10, 20) ➞ 0
# No number between 1 and 10 can be evenly divided by 20.
evenly_divisible(1, 10, 2) ➞ 30
# 2 + 4 + 6 + 8 + 10 = 30
evenly_divisible(1, 10, 3) ➞ 18
# 3 + 6 + 9 = 18

Answer:
def evenly_divisible(a, b, c):
    total_sum = 0
    for num in range(a, b + 1):
        if num % c == 0:
            total_sum += num
    return total_sum
a = int(input("Enter a: "))
b = int(input("Enter b: "))
c = int(input("Enter c: "))
result = evenly_divisible(a, b, c)
print("Sum of evenly divisible numbers:", result)

Question2. Create a function that returns True if a given inequality expression is correct and False otherwise.
Examples
correct_signs("3 < 7 < 11") ➞ True
correct_signs("13 > 44 > 33 > 1") ➞ False
correct_signs("1 < 2 < 6 < 9 > 3") ➞ True

Answer:
def correct_signs(expression):
    return eval(expression)
expression = input("Enter an inequality expression: ")
result = correct_signs(expression)
print(result)

Question3. Create a function that replaces all the vowels in a string with a specified character.
Examples
replace_vowels("the aardvark", "#") ➞ "th# ##rdv#rk"
replace_vowels("minnie mouse", "?") ➞ "m?nn?? m??s?"
replace_vowels("shakespeare", "*") ➞ "sh*k*sp**r*"

Answer:

def replace_vowels(s, char):
    vowels = "aeiouAEIOU"
    for vowel in vowels:
        s = s.replace(vowel, char)
    return s
string = input("Enter a string: ")
replacement_char = input("Enter a replacement character: ")
result = replace_vowels(string, replacement_char)
print("Modified string:", result)

Question4. Write a function that calculates the factorial of a number recursively.
Examples
factorial(5) ➞ 120
factorial(3) ➞ 6
factorial(1) ➞ 1
factorial(0) ➞ 1

Answer:
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)
num = int(input("Enter a number: "))
result = factorial(num)
print("Factorial:", result)

Question 5
Hamming distance is the number of characters that differ between two strings.
To illustrate:
String1: "abcbba"
String2: "abcbda"
Hamming Distance: 1 - "b" vs. "d" is the only difference.
Create a function that computes the hamming distance between two strings.
Examples
hamming_distance("abcde", "bcdef") ➞ 5
hamming_distance("abcde", "abcde") ➞ 0
hamming_distance("strong", "strung") ➞ 1

Answer:
def hamming_distance(s1, s2):
    distance = 0
    for char1, char2 in zip(s1, s2):
        if char1 != char2:
            distance += 1
    return distance
string1 = input("Enter the first string: ")
string2 = input("Enter the second string: ")
result = hamming_distance(string1, string2)
print("Hamming distance:", result)
